from talon import Context, Module, actions
ctx = Context()
mod = Module()
python_keywords = {'false': 'False', 'none': 'None', 'true': 'True', 'and': 'and', 'as': 'as', 'assert': 'assert', 'async': 'async', 'await': 'await', 'break': 'break', 'class': 'class', 'continue': 'continue', 'define': 'def', 'elif': 'elif', 'else': 'else', 'except': 'except', 'finally': 'finally', 'for': 'for', 'from': 'from', 'global': 'global', 'if': 'if', 'import': 'import', 'in': 'in', 'is': 'is', 'lambda': 'lambda', 'nonlocal': 'nonlocal', 'not': 'not', 'or': 'or', 'pass': 'pass', 'raise': 'raise', 'return': 'return', 'try': 'try', 'while': 'while', 'with': 'with', 'yield': 'yield', 'telephone': 'THIS IS TEST'}
mod.list('vocabulary', desc='additional vocabulary words')
automatically_generated_mapping = {'import': 'import', 'logging': 'logging', 'raat connector': 'raat_connector', 'raat': 'raat', 'server': '.server', 'taskerror': 'TaskError', 'sklearn': 'sklearn', 'metrics': '.metrics', 'pairwise': '.pairwise', 'cosine': 'cosine', 'cosine similarity': 'cosine_similarity', 'pymongo': 'pymongo', 'mongoclient': 'MongoClient', 'binary': 'Binary', 'pickle': 'pickle', 'search': 'search', 'preproc': 'preproc', 'preproc extraction': 'preproc_extraction_', 'preproc extraction aep': 'preproc_extraction_AEP_', 'preproc extraction aep matching': 'preproc_extraction_AEP_matching', 'transform': 'transform', 'transform data': 'transform_data_', 'transform data and': 'transform_data_and_', 'transform data and index': 'transform_data_and_index_', 'transform data and index search': 'transform_data_and_index_search', 'worker': '.worker', 'optimal': 'optimal', 'optimal batch': 'OPTIMAL_BATCH_', 'optimal batch size': 'OPTIMAL_BATCH_SIZE', 'indexing': 'indexing', 'indexing verson': 'INDEXING_VERSON', 'name of': 'name_of_', 'name': 'name', 'name of database': 'NAME_OF_DATABASE', 'global': 'global', 'name of global': 'NAME_OF_GLOBAL_', 'name of global project': 'NAME_OF_GLOBAL_PROJECT', 'cache': 'cache', 'cache embedding': 'cache_embedding_', 'cache embedding model': 'cache_embedding_model', 'get embedding': 'get_embedding', 'get': 'get', 'batch': 'batch', 'tensorflow': 'tensorflow', 'tensorflow text': 'tensorflow_text', 'tensorflow hub': 'tensorflow_hub', 'dirname': '.dirname', 'dirofdir': 'dirOfdir', 'split': '.split', 'tailofmodelpath': 'tailOfModelPath', 'print': 'print', 'modeldir': 'modelDir', 'return': 'return', 'data base': 'data_base_', 'data': 'data', 'data base connection': 'data_base_connection_', 'data base connection cache': 'data_base_connection_cache', 'connect': 'connect', 'connect to': 'connect_to_', 'connect to db': 'connect_to_db', 'environ': '.environ', 'assert': 'assert', 'mongo': 'mongo', 'mongo db': 'mongo_db_', 'mongo db port': 'mongo_db_port', 'mongo db host': 'mongo_db_host', 'mongo user': 'mongo_user', 'mongo password': 'mongo_password', 'client': 'client', 'username': 'username', 'password': 'password', 'warning': '.warning', 'update': 'update', 'update searchable': 'update_searchable_', 'update searchable entries': 'update_searchable_entries_', 'update searchable entries to': 'update_searchable_entries_to_', 'searchable': 'searchable', 'entries': 'entries', 'service': 'service', 'started': 'started', 'overall': 'overall', 'overall searchable': 'overall_searchable_', 'overall searchable entries': 'overall_searchable_entries', 'list of': 'list_of_', 'list': 'list', 'list of col': 'list_of_col_', 'list of col names': 'list_of_col_names', 'list collection': '.list_collection_', 'list collection names': '.list_collection_names', 'col name': '_col_name', 'col': 'col', 'tmp col': 'tmp_col', 'tmp': 'tmp', 'append': '.append', 'false': 'False', 'cursor': 'cursor', 'se list': 'se_list', 'se': 'se', 'enumerate': 'enumerate', 'generic': 'generic', 'generic insert': 'generic_insert_', 'generic insert and': 'generic_insert_and_', 'generic insert and update': 'generic_insert_and_update_', 'generic insert and update method': 'generic_insert_and_update_method', 'extended': 'extended', 'extended proj': 'extended_proj_', 'extended proj id': 'extended_proj_id', 'interface': 'interface', 'interface for': 'interface_for_', 'interface for generic': 'interface_for_generic_', 'interface for generic insert': 'interface_for_generic_insert_', 'interface for generic insert and': 'interface_for_generic_insert_and_', 'searchable entry': 'searchable_entry_', 'searchable entry list': 'searchable_entry_list', 'project': 'project', 'project id': 'project_id', 'generic update': 'generic_update', 'projectid': 'projectid', 'global generic': 'global_generic_', 'global generic update': 'global_generic_update', 'queue': 'queue', 'result': 'result', 'stop update': 'stop_update', 'stop': 'stop', 'list of searchable': 'list_of_searchable_', 'list of searchable entries': 'list_of_searchable_entries_', 'list of searchable entries of': 'list_of_searchable_entries_of_', 'list of searchable entries of type': 'list_of_searchable_entries_of_type_', 'entry': 'entry', 'prepared': 'prepared', 'prepared dicts': 'prepared_dicts', 'prepare': 'prepare', 'prepare dict': 'prepare_dict_', 'prepare dict for': 'prepare_dict_for_', 'prepare dict for indexing': 'prepare_dict_for_indexing', 'col has': 'col_has_', 'col has to': 'col_has_to_', 'col has to be': 'col_has_to_be_', 'col has to be created': 'col_has_to_be_created', 'collection': 'collection', 'entryid': "'entryid'", 'refid': 'refid', 'refid exists': 'refid_exists', 'find one': '.find_one', 'find': 'find', 'entry exists': 'entry_exists', 'status': 'status', 'status code': 'status_code', 'error': 'error', 'filter': '_filter', 'newvalues': 'newvalues', 'update one': '.update_one', 'upsert': 'upsert', 'create': 'create', 'create index': '.create_index', 'default': 'default', 'default language': 'default_language', 'language': 'language', 'language override': 'language_override', 'interface for generic execute': 'interface_for_generic_execute_', 'indexkey': 'indexkey', 'search key': 'search_key_', 'search strategy': 'search_strategy', 'n results': 'n_results', 'n': 'n', 'search key type': 'search_key_type', 'generic execute': 'generic_execute_', 'generic execute search': 'generic_execute_search', 'semantic': 'semantic', 'semantic search': 'semantic_search', 'relevant': 'relevant', 'relevant search': 'relevant_search_', 'relevant search entries': 'relevant_search_entries', 'outputs': '"outputs"', 'embedded': 'embedded', 'embedded q': 'embedded_q', 'dict with': 'dict_with_', 'dict': 'dict', 'dict with embeddings': 'dict_with_embeddings', 'searchentry': 'searchentry', 'searchentry obj': 'searchEntry_obj', 'texts': 'texts', 'embeddings': 'embeddings', 'embeddings list': 'embeddings_list', 'entry tup': 'entry_tup', 'items': '.items', 'loads': '.loads', 'similarities': 'similarities', 'tolist': '.tolist', 'ordered': 'ordered', 'ordered words': 'ordered_words_', 'ordered words on': 'ordered_words_on_', 'ordered words on whole': 'ordered_words_on_whole_', 'ordered words on whole corpus': 'ordered_words_on_whole_corpus_', 'lambda': 'lambda', 'reverse': 'reverse', 'max similarity': 'max_similarity', 'max': 'max', 'result of': 'result_of_', 'result of semantic': 'result_of_semantic_', 'result of semantic search': 'result_of_semantic_search', 'result word': 'result_word_', 'result word obj': 'result_word_obj', 'extend': '.extend', 'execute': 'execute', 'execute word': 'execute_word_', 'execute word matching': 'execute_word_matching_', 'execute word matching search': 'execute_word_matching_search', 'col from': 'col_from_', 'col from db': 'col_from_db', 'search query': 'search_query', 'similarity': 'similarity', 'fuzzy': 'fuzzy', 'fuzzy search': 'fuzzy_search', 'result of fuzzy': 'result_of_fuzzy_', 'result of fuzzy search': 'result_of_fuzzy_search', 'efficient': 'efficient', 'efficient fuzzy': 'efficient_fuzzy_', 'efficient fuzzy search': 'efficient_fuzzy_search', 'exact': 'exact', 'exact search': 'exact_search', 'db col': 'db_col', 'db': 'db', 'result of exact': 'result_of_exact_', 'result of exact search': 'result_of_exact_search', 'execute substring': '.execute_substring_', 'execute substring matching': '.execute_substring_matching', 'result len': 'result_len', 'searchentries': 'searchentries', 'searchentries relevant': 'searchEntries_relevant_', 'searchentries relevant for': 'searchEntries_relevant_for_', 'searchentries relevant for search': 'searchEntries_relevant_for_search', 'response': 'response', 'query': 'query', 'query contain': '.query_contain_', 'query contain nouns': '.query_contain_nouns', 'results': 'results', 'results of': 'results_of_', 'results of exact': 'results_of_exact_', 'results of exact search': 'results_of_exact_search', 'results of semantic': 'results_of_semantic_', 'results of semantic search': 'results_of_semantic_search', 'results of fuzzy': 'results_of_fuzzy_', 'results of fuzzy search': 'results_of_fuzzy_search', 'combine': 'combine', 'combine search': '.combine_search_', 'combine search results': '.combine_search_results', 'temp response': 'temp_response', 'temp': 'temp', 'find possible': 'find_possible_', 'find possible expansion': 'find_possible_expansion', 'abb to': '.abb_to_', 'abb': 'abb', 'abb to generic': '.abb_to_generic', 'result lentgh': 'result_lentgh', 'interface for generic delete': 'interface_for_generic_delete_', 'interface for generic delete method': 'interface_for_generic_delete_method', 'list of raat': 'list_of_raat_', 'list of raat ids': 'list_of_raat_ids', 'generic delete': 'generic_delete_', 'generic delete method': 'generic_delete_method', 'exclude': 'exclude', 'exclude fields': 'exclude_fields', 'found': 'found', 'found entries': 'found_entries', 'delete': 'delete', 'delete one': '.delete_one', 'count': 'count', 'count documents': '.count_documents', 'list entries': 'list_entries_', 'list entries on': 'list_entries_on_', 'list entries on global': 'list_entries_on_global_', 'list entries on global data': 'list_entries_on_global_data_', 'list entries on global data for': 'list_entries_on_global_data_for_', 'cluster': 'cluster', 'interface for list': 'interface_for_list_', 'interface for list all': 'interface_for_list_all_', 'interface for list all indices': 'interface_for_list_all_indices_', 'interface for list all indices for': 'interface_for_list_all_indices_for_', 'list all': 'list_all_', 'list all indices': 'list_all_indices_', 'list all indices for': 'list_all_indices_for_', 'list all indices for given': 'list_all_indices_for_given_', 'list all indices for given project': 'list_all_indices_for_given_project', 'list entries for': 'list_entries_for_', 'list entries for specific': 'list_entries_for_specific_', 'list entries for specific project': 'list_entries_for_specific_project', 'startswith': '.startswith', 'calc similarity': 'calc_similarity_', 'calc': 'calc', 'calc similarity matrix': 'calc_similarity_matrix', 'contentvalue': 'contentvalue', 'contentvalue list': 'contentvalue_list', 'name of relevant': 'name_of_relevant_', 'name of relevant col': 'name_of_relevant_col', 'row embedding': 'row_embedding', 'row': 'row', 'interface for calc': 'interface_for_calc_', 'interface for calc similarity': 'interface_for_calc_similarity_', 'interface healthcheck': 'interface_healthcheck', 'list of se': 'list_of_se_', 'list of se of': 'list_of_se_of_', 'list of se of type': 'list_of_se_of_type_', 'list of se of type dict': 'list_of_se_of_type_dict', 'list of cvs': 'list_of_cVs', 'batched': 'batched', 'batched cvs': 'batched_cVs', 'range': 'range', 'prepared data': 'prepared_data_', 'prepared data dicts': 'prepared_data_dicts', 'preprocess': 'preprocess', 'preprocess and': '.preprocess_and_', 'preprocess and prepare': '.preprocess_and_prepare_', 'preprocess and prepare searchable': '.preprocess_and_prepare_searchable_', 'extracted': 'extracted', 'extracted ncs': 'extracted_ncs', 'sentence': 'sentence', 'sentence embeddings': 'sentence_embeddings', 'sublist': 'sublist', 'sublist embedded': 'sublist_embedded_', 'sublist embedded batch': 'sublist_embedded_batch', 'nounchunk': 'nounchunk', 'nounchunk embbedings': 'nounChunk_embbedings', 'sentence batched': 'sentence_batched_', 'sentence batched ncs': 'sentence_batched_ncs', 'embed': 'embed', 'embed ncs': 'embed_ncs', 'dumps': '.dumps', 'protocol': 'protocol', 'subtype': 'subtype', 'delete all': 'delete_all_', 'delete all entries': 'delete_all_entries_', 'delete all entries from': 'delete_all_entries_from_', 'delete all entries from index': 'delete_all_entries_from_index', 'format': '.format', 'interface for delete': 'interface_for_delete_', 'interface for delete all': 'interface_for_delete_all_', 'interface for delete all entries': 'interface_for_delete_all_entries_'}
mod.list('python_keywords', desc='Automatically extracted key words from python files')
ctx.lists['self.python_keywords'] = dict(automatically_generated_mapping, **python_keywords)
ctx.lists['user.vocabulary'] = dict(automatically_generated_mapping, **python_keywords)

@mod.capture(rule='{self.python_keywords}+')
def python_keywords(m) -> str:
    return ''.join(m.python_keywords_list)